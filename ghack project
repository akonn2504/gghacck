1. Backend API with Flask
Install Dependencies:

python3 -m venv venv
source venv/bin/activate  # Or venv\Scripts\activate (Windows)
pip install Flask scikit-learn numpy

Create Flask app (app.py):

from flask import Flask, jsonify, request
from sklearn.ensemble import RandomForestClassifier
import numpy as np

app = Flask(__name__)

X_train = np.array([[70, 60, 80], [80, 45, 60], [90, 50, 85], [75, 40, 50]])
y_train = np.array([0, 1, 0, 1])  # 0 = Calm, 1 = Anxious
clf = RandomForestClassifier(n_estimators=100)
clf.fit(X_train, y_train)

data_store = []

@app.route('/api/data', methods=['POST'])
def add_data():
    new_data = request.json
    data_store.append(new_data)
    prediction = clf.predict([[new_data['heart_rate'], new_data['heart_rate_variability'], new_data['sleep_pattern']]])
    state = 'Calm' if prediction == 0 else 'Anxious'
    return jsonify({"mental_state": state, "data": new_data}), 201

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)

Run Flask API:

python app.py

 Frontend Mobile App (React Native)
Create React Native Project:
npx react-native init MentalHealthApp
cd MentalHealthApp
npm install axios

Update App.js to fetch data and display mental state:
import React, { useState } from 'react';
import { View, Text, Button, StyleSheet } from 'react-native';
import axios from 'axios';

const App = () => {
  const [mentalState, setMentalState] = useState('');

  const handleFetchData = () => {
    const newData = { heart_rate: 80, heart_rate_variability: 50, sleep_pattern: 70 };
    axios.post('http://localhost:5000/api/data', newData)
      .then(response => setMentalState(response.data.mental_state))
      .catch(error => console.error(error));
  };

  return (
    <View style={styles.container}>
      <Text>Mental Health Monitoring</Text>
      <Button title="Fetch Mental State" onPress={handleFetchData} />
      {mentalState ? <Text>Mental State: {mentalState}</Text> : <Text>No data yet</Text>}
    </View>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, justifyContent: 'center', alignItems: 'center' },
});

export default App;

Run React Native app:
npx react-native start
npx react-native run-android  # Or run-ios for iOS

 Deploy Flask API to Heroku
Create Procfile:
web: python app.py

Deploy to Heroku:
heroku create
git init
git add .
git commit -m "Initial commit"
git push heroku master

Update the React Native app with Heroku's API URL.

Final Steps
Mobile App: Build and publish the app to Google Play or the App Store.
API: Use the live Heroku URL for the API.
This setup gives you a basic prototype of a mental health monitoring system using simulated wearable data, AI predictions, and a React Native mobile app.
